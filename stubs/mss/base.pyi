from typing import Callable, Dict, Iterator, List, Optional
from types import TracebackType


Monitor = Dict[str, int]
Monitors = List[Monitor]


class MSSBase(object):
    image = ...  # type: bytes
    width = ...  # type: int
    height = ...  # type: int

    def __enter__(self) -> MSSBase: ...
    def __exit__(self, exc_type: Optional[type], exc_value: Optional[Exception], traceback: Optional[TracebackType]) -> None: ...
    def bgra_to_rgb(self, raw: bytearray) -> bytes: ...
    def get_pixels(self, monitor: Monitor) -> bytes: ...
    def monitors(self) -> Monitors: ...
    def save(self, mon: int=0, output: str='monitor-%d.png', callback: Callable[[str], None]=None) -> Iterator[str]: ...
    def to_png(self, data: bytes, output: str) -> None: ...
